[mu [(program)]
[def (sim-print) [lam [(r input!) (c0 clobber!)] {
  li c0 0xbaaabaaa
  csrw 0x51e c0
  csrw 0x51e r
}]]
[def (sim-print-int) [lam [(k num!) (c0 clobber!) (c1 clobber!)] {
  li c0 0xbaaabaaa
  li c1 [id k]
  csrw 0x51e c0
  csrw 0x51e c1
}]]
[def (die) {
  li t0 0xdeaddead
  csrw 0x51e t0}]
[def (get-hartid [-> block!]) [lam [(r output!)] {
  csrr r 0x50b
}]]
[def (get-coreid [-> block!]) [lam [(r output!)] {
  csrr r 0x510
}]]
[def (n-harts num!) 8]
[def (n-cores num!) 16]
[def (critical-harts [lamof clobber! clobber! block!] [-> block!]) [critical n-harts get-hartid]]
[def (critical-cores [lamof clobber! clobber! block!] [-> block!]) [critical n-cores get-coreid]]
[def (critical-harts-mask) [critical-mask n-harts get-hartid]]
[def (critical-cores-mask) [critical-mask n-cores get-coreid]]
[def (forkjoin-harts [lamof clobber! [-> block!]] [-> block!])
  [forkjoin n-harts get-hartid]]
[def (forkjoin-cores [lamof clobber! [-> block!]] [-> block!])
  [forkjoin n-cores get-coreid]]
[def (single-hart [-> block!]) [single get-hartid]]
[def (single-core [-> block!]) [single get-coreid]]
[def (single [-> block!])
  [lam [(clobber0 clobber!) (do-single block!)]
  [single-hart clobber0 [single-core clobber0 do-single]]]]
[def (critical-cores-mod8) [critical-cores-mask [lam [(core input! output!)] {andi core core 0b111}] -1]]
[def (critical-cores-div8) [critical-cores-mask [lam [(core input! output!)] {srli core core 3}] -1]]
[def (init block!) [init n-harts single-hart]]
[def (reduce-shmem [-> block!]) [reduce-shmem n-harts get-hartid]]
[def (send-arr-distmem [-> block!])
  [lam [(array-start input! clobber!) (len num!) (c0 clobber!) (c1 clobber!) (c2 clobber!)]
    [using-noc c2 [mu [] {
      [for c0 c1 0 len 1 {

      }]
    }]]]]
[def (parfor) [parfor n-harts get-hartid]]
[program]]
